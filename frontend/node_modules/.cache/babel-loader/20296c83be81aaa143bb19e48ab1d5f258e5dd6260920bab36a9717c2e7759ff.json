{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\n\n// URL de base de l'API - utilise la variable d'environnement ou une valeur par défaut\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:5000/api';\nexport default createStore({\n  state: {\n    currentUser: JSON.parse(localStorage.getItem('user')),\n    users: [],\n    recommendations: [],\n    genres: [],\n    streamingServices: [],\n    isLoading: false,\n    error: null\n  },\n  getters: {\n    isLoggedIn: state => !!state.currentUser,\n    currentUserId: state => state.currentUser ? state.currentUser.id : null\n  },\n  mutations: {\n    setCurrentUser(state, user) {\n      state.currentUser = user;\n      if (user) {\n        localStorage.setItem('user', JSON.stringify(user));\n      } else {\n        localStorage.removeItem('user');\n      }\n    },\n    setUsers(state, users) {\n      state.users = users;\n    },\n    setRecommendations(state, recommendations) {\n      state.recommendations = recommendations;\n    },\n    setGenres(state, genres) {\n      state.genres = genres;\n    },\n    setStreamingServices(state, services) {\n      state.streamingServices = services;\n    },\n    setLoading(state, isLoading) {\n      state.isLoading = isLoading;\n    },\n    setError(state, error) {\n      state.error = error;\n    },\n    updateUserPreferences(state, preferences) {\n      if (state.currentUser) {\n        state.currentUser.preferences = {\n          ...state.currentUser.preferences,\n          ...preferences\n        };\n        localStorage.setItem('user', JSON.stringify(state.currentUser));\n      }\n    }\n  },\n  actions: {\n    // Récupérer la liste des utilisateurs\n    async fetchUsers({\n      commit\n    }) {\n      commit('setLoading', true);\n      commit('setError', null);\n      try {\n        const response = await axios.get(`${API_URL}/users`);\n        commit('setUsers', response.data);\n      } catch (error) {\n        commit('setError', 'Erreur lors de la récupération des utilisateurs');\n        console.error(error);\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    // Récupérer les recommandations pour l'utilisateur actuel\n    async fetchRecommendations({\n      commit,\n      state\n    }, {\n      contentType = 'all',\n      n = 5,\n      streamingService = null\n    }) {\n      if (!state.currentUser) return;\n      commit('setLoading', true);\n      commit('setError', null);\n      try {\n        let url = `${API_URL}/recommendations/${state.currentUser.id}?content_type=${contentType}&n=${n}`;\n        if (streamingService) {\n          url += `&streaming_service=${streamingService}`;\n        }\n        const response = await axios.get(url);\n        commit('setRecommendations', response.data);\n      } catch (error) {\n        commit('setError', 'Erreur lors de la récupération des recommandations');\n        console.error(error);\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    // Récupérer les genres disponibles\n    async fetchGenres({\n      commit\n    }) {\n      commit('setLoading', true);\n      commit('setError', null);\n      try {\n        const response = await axios.get(`${API_URL}/genres`);\n        commit('setGenres', response.data);\n      } catch (error) {\n        commit('setError', 'Erreur lors de la récupération des genres');\n        console.error(error);\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    // Récupérer les services de streaming disponibles\n    async fetchStreamingServices({\n      commit\n    }) {\n      commit('setLoading', true);\n      commit('setError', null);\n      try {\n        const response = await axios.get(`${API_URL}/services`);\n        commit('setStreamingServices', response.data);\n      } catch (error) {\n        commit('setError', 'Erreur lors de la récupération des services de streaming');\n        console.error(error);\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    // Se connecter avec un ID utilisateur\n    async login({\n      commit,\n      dispatch\n    }, userId) {\n      commit('setLoading', true);\n      commit('setError', null);\n      try {\n        const response = await axios.get(`${API_URL}/users/${userId}`);\n        commit('setCurrentUser', response.data);\n        return true;\n      } catch (error) {\n        commit('setError', 'Erreur lors de la connexion');\n        console.error(error);\n        return false;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    // Créer un nouvel utilisateur\n    async createUser({\n      commit\n    }, userData) {\n      commit('setLoading', true);\n      commit('setError', null);\n      try {\n        const response = await axios.post(`${API_URL}/users`, userData);\n        commit('setCurrentUser', response.data);\n        return true;\n      } catch (error) {\n        commit('setError', 'Erreur lors de la création de l\\'utilisateur');\n        console.error(error);\n        return false;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    // Mettre à jour les préférences de l'utilisateur\n    async updateUserPreferences({\n      commit,\n      state\n    }, preferences) {\n      if (!state.currentUser) return false;\n      commit('setLoading', true);\n      commit('setError', null);\n      try {\n        await axios.put(`${API_URL}/users/${state.currentUser.id}`, preferences);\n        commit('updateUserPreferences', preferences);\n        return true;\n      } catch (error) {\n        commit('setError', 'Erreur lors de la mise à jour des préférences');\n        console.error(error);\n        return false;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    // Ajouter un élément à l'historique de l'utilisateur\n    async addToHistory({\n      state,\n      commit\n    }, item) {\n      if (!state.currentUser) return false;\n      commit('setLoading', true);\n      commit('setError', null);\n      try {\n        // Mise à jour de l'API pour correspondre au backend\n        await axios.post(`${API_URL}/users/${state.currentUser.id}/history`, {\n          item: item\n        });\n\n        // Mise à jour locale de l'historique\n        if (!state.currentUser.watch_history) {\n          commit('updateUserPreferences', {\n            watch_history: [item]\n          });\n        } else {\n          const updatedHistory = [...state.currentUser.watch_history, item];\n          commit('updateUserPreferences', {\n            watch_history: updatedHistory\n          });\n        }\n        return true;\n      } catch (error) {\n        commit('setError', 'Erreur lors de l\\'ajout à l\\'historique');\n        console.error(error);\n        return false;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    // Se déconnecter\n    logout({\n      commit\n    }) {\n      commit('setCurrentUser', null);\n      commit('setRecommendations', []);\n    }\n  }\n});","map":{"version":3,"names":["createStore","axios","API_URL","process","env","VUE_APP_API_URL","state","currentUser","JSON","parse","localStorage","getItem","users","recommendations","genres","streamingServices","isLoading","error","getters","isLoggedIn","currentUserId","id","mutations","setCurrentUser","user","setItem","stringify","removeItem","setUsers","setRecommendations","setGenres","setStreamingServices","services","setLoading","setError","updateUserPreferences","preferences","actions","fetchUsers","commit","response","get","data","console","fetchRecommendations","contentType","n","streamingService","url","fetchGenres","fetchStreamingServices","login","dispatch","userId","createUser","userData","post","put","addToHistory","item","watch_history","updatedHistory","logout"],"sources":["/home/ubuntu/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex';\nimport axios from 'axios';\n\n// URL de base de l'API - utilise la variable d'environnement ou une valeur par défaut\nconst API_URL = process.env.VUE_APP_API_URL || 'http://localhost:5000/api';\n\nexport default createStore({\n  state: {\n    currentUser: JSON.parse(localStorage.getItem('user')),\n    users: [],\n    recommendations: [],\n    genres: [],\n    streamingServices: [],\n    isLoading: false,\n    error: null\n  },\n  getters: {\n    isLoggedIn: state => !!state.currentUser,\n    currentUserId: state => state.currentUser ? state.currentUser.id : null\n  },\n  mutations: {\n    setCurrentUser(state, user) {\n      state.currentUser = user;\n      if (user) {\n        localStorage.setItem('user', JSON.stringify(user));\n      } else {\n        localStorage.removeItem('user');\n      }\n    },\n    setUsers(state, users) {\n      state.users = users;\n    },\n    setRecommendations(state, recommendations) {\n      state.recommendations = recommendations;\n    },\n    setGenres(state, genres) {\n      state.genres = genres;\n    },\n    setStreamingServices(state, services) {\n      state.streamingServices = services;\n    },\n    setLoading(state, isLoading) {\n      state.isLoading = isLoading;\n    },\n    setError(state, error) {\n      state.error = error;\n    },\n    updateUserPreferences(state, preferences) {\n      if (state.currentUser) {\n        state.currentUser.preferences = { ...state.currentUser.preferences, ...preferences };\n        localStorage.setItem('user', JSON.stringify(state.currentUser));\n      }\n    }\n  },\n  actions: {\n    // Récupérer la liste des utilisateurs\n    async fetchUsers({ commit }) {\n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        const response = await axios.get(`${API_URL}/users`);\n        commit('setUsers', response.data);\n      } catch (error) {\n        commit('setError', 'Erreur lors de la récupération des utilisateurs');\n        console.error(error);\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    \n    // Récupérer les recommandations pour l'utilisateur actuel\n    async fetchRecommendations({ commit, state }, { contentType = 'all', n = 5, streamingService = null }) {\n      if (!state.currentUser) return;\n      \n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        let url = `${API_URL}/recommendations/${state.currentUser.id}?content_type=${contentType}&n=${n}`;\n        if (streamingService) {\n          url += `&streaming_service=${streamingService}`;\n        }\n        \n        const response = await axios.get(url);\n        commit('setRecommendations', response.data);\n      } catch (error) {\n        commit('setError', 'Erreur lors de la récupération des recommandations');\n        console.error(error);\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    \n    // Récupérer les genres disponibles\n    async fetchGenres({ commit }) {\n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        const response = await axios.get(`${API_URL}/genres`);\n        commit('setGenres', response.data);\n      } catch (error) {\n        commit('setError', 'Erreur lors de la récupération des genres');\n        console.error(error);\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    \n    // Récupérer les services de streaming disponibles\n    async fetchStreamingServices({ commit }) {\n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        const response = await axios.get(`${API_URL}/services`);\n        commit('setStreamingServices', response.data);\n      } catch (error) {\n        commit('setError', 'Erreur lors de la récupération des services de streaming');\n        console.error(error);\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    \n    // Se connecter avec un ID utilisateur\n    async login({ commit, dispatch }, userId) {\n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        const response = await axios.get(`${API_URL}/users/${userId}`);\n        commit('setCurrentUser', response.data);\n        return true;\n      } catch (error) {\n        commit('setError', 'Erreur lors de la connexion');\n        console.error(error);\n        return false;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    \n    // Créer un nouvel utilisateur\n    async createUser({ commit }, userData) {\n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        const response = await axios.post(`${API_URL}/users`, userData);\n        commit('setCurrentUser', response.data);\n        return true;\n      } catch (error) {\n        commit('setError', 'Erreur lors de la création de l\\'utilisateur');\n        console.error(error);\n        return false;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    \n    // Mettre à jour les préférences de l'utilisateur\n    async updateUserPreferences({ commit, state }, preferences) {\n      if (!state.currentUser) return false;\n      \n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        await axios.put(`${API_URL}/users/${state.currentUser.id}`, preferences);\n        commit('updateUserPreferences', preferences);\n        return true;\n      } catch (error) {\n        commit('setError', 'Erreur lors de la mise à jour des préférences');\n        console.error(error);\n        return false;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n      // Ajouter un élément à l'historique de l'utilisateur\n    async addToHistory({ state, commit }, item) {\n      if (!state.currentUser) return false;\n      \n      commit('setLoading', true);\n      commit('setError', null);\n      \n      try {\n        // Mise à jour de l'API pour correspondre au backend\n        await axios.post(`${API_URL}/users/${state.currentUser.id}/history`, { \n          item: item \n        });\n        \n        // Mise à jour locale de l'historique\n        if (!state.currentUser.watch_history) {\n          commit('updateUserPreferences', { watch_history: [item] });\n        } else {\n          const updatedHistory = [...state.currentUser.watch_history, item];\n          commit('updateUserPreferences', { watch_history: updatedHistory });\n        }\n        \n        return true;\n      } catch (error) {\n        commit('setError', 'Erreur lors de l\\'ajout à l\\'historique');\n        console.error(error);\n        return false;\n      } finally {\n        commit('setLoading', false);\n      }\n    },\n    \n    // Se déconnecter\n    logout({ commit }) {\n      commit('setCurrentUser', null);\n      commit('setRecommendations', []);\n    }\n  }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}