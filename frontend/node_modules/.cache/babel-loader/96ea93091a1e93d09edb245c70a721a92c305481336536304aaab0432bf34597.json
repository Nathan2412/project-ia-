{"ast":null,"code":"export default {\n  name: 'NotificationSystem',\n  data() {\n    return {\n      notifications: [],\n      nextId: 1\n    };\n  },\n  methods: {\n    addNotification(message, type = 'info', timeout = 5000) {\n      const id = this.nextId++;\n      const notification = {\n        id,\n        message,\n        type\n      };\n      this.notifications.push(notification);\n\n      // Auto-remove after timeout\n      if (timeout !== 0) {\n        setTimeout(() => {\n          this.removeNotification(id);\n        }, timeout);\n      }\n      return id;\n    },\n    removeNotification(id) {\n      const index = this.notifications.findIndex(n => n.id === id);\n      if (index !== -1) {\n        this.notifications.splice(index, 1);\n      }\n    },\n    success(message, timeout = 5000) {\n      return this.addNotification(message, 'success', timeout);\n    },\n    error(message, timeout = 5000) {\n      return this.addNotification(message, 'error', timeout);\n    },\n    info(message, timeout = 5000) {\n      return this.addNotification(message, 'info', timeout);\n    },\n    warning(message, timeout = 5000) {\n      return this.addNotification(message, 'warning', timeout);\n    }\n  }\n};","map":{"version":3,"names":["name","data","notifications","nextId","methods","addNotification","message","type","timeout","id","notification","push","setTimeout","removeNotification","index","findIndex","n","splice","success","error","info","warning"],"sources":["/home/ubuntu/frontend/src/components/NotificationSystem.vue"],"sourcesContent":["<template>\n  <div class=\"notification-wrapper\">\n    <transition-group name=\"notification\">\n      <div v-for=\"notification in notifications\" \n          :key=\"notification.id\" \n          class=\"notification\" \n          :class=\"[notification.type]\">\n        <div class=\"notification-content\">\n          {{ notification.message }}\n        </div>\n        <button class=\"notification-close\" @click=\"removeNotification(notification.id)\">\n          &times;\n        </button>\n      </div>\n    </transition-group>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'NotificationSystem',\n  data() {\n    return {\n      notifications: [],\n      nextId: 1\n    };\n  },\n  methods: {\n    addNotification(message, type = 'info', timeout = 5000) {\n      const id = this.nextId++;\n      const notification = { id, message, type };\n      this.notifications.push(notification);\n      \n      // Auto-remove after timeout\n      if (timeout !== 0) {\n        setTimeout(() => {\n          this.removeNotification(id);\n        }, timeout);\n      }\n      \n      return id;\n    },\n    removeNotification(id) {\n      const index = this.notifications.findIndex(n => n.id === id);\n      if (index !== -1) {\n        this.notifications.splice(index, 1);\n      }\n    },\n    success(message, timeout = 5000) {\n      return this.addNotification(message, 'success', timeout);\n    },\n    error(message, timeout = 5000) {\n      return this.addNotification(message, 'error', timeout);\n    },\n    info(message, timeout = 5000) {\n      return this.addNotification(message, 'info', timeout);\n    },\n    warning(message, timeout = 5000) {\n      return this.addNotification(message, 'warning', timeout);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.notification-wrapper {\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  z-index: 9999;\n  width: 300px;\n}\n\n.notification {\n  padding: 12px 15px;\n  margin-bottom: 10px;\n  border-radius: 4px;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  color: white;\n  background-color: #333;\n}\n\n.notification.success {\n  background-color: #28a745;\n}\n\n.notification.error {\n  background-color: #dc3545;\n}\n\n.notification.info {\n  background-color: #17a2b8;\n}\n\n.notification.warning {\n  background-color: #ffc107;\n  color: #333;\n}\n\n.notification-content {\n  flex-grow: 1;\n  padding-right: 10px;\n}\n\n.notification-close {\n  background: transparent;\n  border: none;\n  color: inherit;\n  cursor: pointer;\n  font-size: 18px;\n  padding: 0;\n  opacity: 0.7;\n  transition: opacity 0.2s;\n}\n\n.notification-close:hover {\n  opacity: 1;\n}\n\n/* Transition animations */\n.notification-enter-active,\n.notification-leave-active {\n  transition: all 0.3s ease;\n}\n\n.notification-enter-from {\n  opacity: 0;\n  transform: translateX(50px);\n}\n\n.notification-leave-to {\n  opacity: 0;\n  transform: translateY(-30px);\n}\n</style>\n"],"mappings":"AAmBA,eAAe;EACbA,IAAI,EAAE,oBAAoB;EAC1BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MACjBC,MAAM,EAAE;IACV,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,eAAeA,CAACC,OAAO,EAAEC,IAAG,GAAI,MAAM,EAAEC,OAAM,GAAI,IAAI,EAAE;MACtD,MAAMC,EAAC,GAAI,IAAI,CAACN,MAAM,EAAE;MACxB,MAAMO,YAAW,GAAI;QAAED,EAAE;QAAEH,OAAO;QAAEC;MAAK,CAAC;MAC1C,IAAI,CAACL,aAAa,CAACS,IAAI,CAACD,YAAY,CAAC;;MAErC;MACA,IAAIF,OAAM,KAAM,CAAC,EAAE;QACjBI,UAAU,CAAC,MAAM;UACf,IAAI,CAACC,kBAAkB,CAACJ,EAAE,CAAC;QAC7B,CAAC,EAAED,OAAO,CAAC;MACb;MAEA,OAAOC,EAAE;IACX,CAAC;IACDI,kBAAkBA,CAACJ,EAAE,EAAE;MACrB,MAAMK,KAAI,GAAI,IAAI,CAACZ,aAAa,CAACa,SAAS,CAACC,CAAA,IAAKA,CAAC,CAACP,EAAC,KAAMA,EAAE,CAAC;MAC5D,IAAIK,KAAI,KAAM,CAAC,CAAC,EAAE;QAChB,IAAI,CAACZ,aAAa,CAACe,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;MACrC;IACF,CAAC;IACDI,OAAOA,CAACZ,OAAO,EAAEE,OAAM,GAAI,IAAI,EAAE;MAC/B,OAAO,IAAI,CAACH,eAAe,CAACC,OAAO,EAAE,SAAS,EAAEE,OAAO,CAAC;IAC1D,CAAC;IACDW,KAAKA,CAACb,OAAO,EAAEE,OAAM,GAAI,IAAI,EAAE;MAC7B,OAAO,IAAI,CAACH,eAAe,CAACC,OAAO,EAAE,OAAO,EAAEE,OAAO,CAAC;IACxD,CAAC;IACDY,IAAIA,CAACd,OAAO,EAAEE,OAAM,GAAI,IAAI,EAAE;MAC5B,OAAO,IAAI,CAACH,eAAe,CAACC,OAAO,EAAE,MAAM,EAAEE,OAAO,CAAC;IACvD,CAAC;IACDa,OAAOA,CAACf,OAAO,EAAEE,OAAM,GAAI,IAAI,EAAE;MAC/B,OAAO,IAAI,CAACH,eAAe,CAACC,OAAO,EAAE,SAAS,EAAEE,OAAO,CAAC;IAC1D;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}